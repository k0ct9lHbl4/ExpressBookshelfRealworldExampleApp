# Объявляем stage-ы для pipeline в самом верху. Они выполняются последовательно.
stages:
  - lint

# Job-а для eslint
# /--------------------------------------------------/
# 1.Вопрос: Зачем NVM, если мы внутри Docker (GitLab CI запускается в дефолтном Docker с ruby)?
# 1.Ответ: В нашем контейнере нету NodeJS, а самый быстрый способ поставить туда его - NVM
# /--------------------------------------------------/

eslint: # Название job-ы
  stage: lint # Указываем stage, на котором будет запускаться эта job-а
  variables: # Указываем переменные окружения. В отличие от GitHub, в GitLab они являются постоянными для всей job-ы.
    NODE_VERSION: 14.17.0
  script: # Шаги, которые будут выполняться
    # Команда для установки NVM из официального README.md NVM
    - curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
    # Запуск NVM для установки NodeJS
    - export NVM_DIR="$HOME/.nvm" && . "$NVM_DIR/nvm.sh" --no-use && nvm install $NODE_VERSION
    # Установка зависимостей
    - npm install
    # Lint исходного кода
    - npm run lint

# Job-а для prettier
prettier:
  stage: lint
  variables:
    NODE_VERSION: 14.17.0
  script:
    - curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
    - export NVM_DIR="$HOME/.nvm" && . "$NVM_DIR/nvm.sh" --no-use && nvm install $NODE_VERSION
    - npm install
    - npm run check:format

# /--------------------------------------------------/
# Наш CI запускает ESLint и Prettier на нашем коде и все хорошо,
# но скорость выполнения нашего pipeline оставляет желать лучшего.
#
# Если посмотреть на них то в глаза бросается,
# что для обоих инструментов мы выполняем практически идентичные действия:
# 1. Установка NVM
# 2. Установка NodeJS
# 3. Установка зависимостей
#
# Проведем небольшой рефакторинг и не только уберем эти
# повторяющиеся действия, но и ускорим наш pipeline за счет удаления установки Node
# /--------------------------------------------------/

# Job-а для eslint с рефакторинг-ом
eslint-with-node-image:
  image: node:14.17.0-alpine # Указываем нужный Docker образ
  stage: lint
  script:
    - npm install
    - npm run lint

# Job-а для prettier с рефакторинг-ом
prettier-with-node-image:
  image: node:14.17.0-alpine
  stage: lint
  script:
    - npm install
    - npm run check:format

# /--------------------------------------------------/
# Мы можем сделать еще быстрее и лучше.
# Для этого включим кэширование node_modules, чтобы не устанавливать зависимости каждый раз.
# Хорошим тоном будет использование ключа хеширования на основе package-lock.json,
# чтобы кэш создавался только тогда, когда меняется файл package-lock.json.
#
# Также поменяем npm install на идеологически правильный npm ci
# 1. npm использует файл package-lock.json для установки зависимостей, игнорируя package.json
# 2. Если после установки зависимости в package-lock.json не совпадают с указанными в package.json,
#    то npm завершит работу с ошибкой.
#    Это можно проверить путем изменения версии любой зависимости в файле package-lock.json
# 3. npm ci автоматически удалит директорию node_modules, если таковая есть
# 4. Файлы package.json и package-lock.json считаются иммутабельными,
#    то есть их содержимое не может быть изменено.
#
# В общем, команда npm ci гарантирует целостность, идемпотентность и иммутабельность нашего окружения.
# /--------------------------------------------------/

cache: # Определим кэширование
  key: # Ключ кэширования (им может быть что угодно: название ветки, хеш коммита)
    files: # Файл или файлы
      - package-lock.json # Наш lock-файл с зависимостями
  paths: # Что кешировать
    - .npm/

# Секция для подготовки кэша (можно объявить вверху, а можно в job-ах)
# before_script: # Перед всеми job-ами
#   - npm install --cache .npm --prefer-offline # Все зависимости ставим в папку .npm и используем версии из кэша

# Job-а для eslint с кэшом
eslint-with-cache:
  image: node:14.17.0-alpine # Указываем нужный Docker образ
  stage: lint
  before_script: # Перед всеми job-ами
    - npm install --cache .npm --prefer-offline # Все зависимости ставим в папку .npm и используем версии из кэша
  script:
    - npm install
    - npm run lint

# Job-а для prettier с кэшом
prettier-with-cache:
  image: node:14.17.0-alpine
  stage: lint
  before_script: # Перед всеми job-ами
    - npm install --cache .npm --prefer-offline # Все зависимости ставим в папку .npm и используем версии из кэша
  script:
    - npm install
    - npm run check:format
